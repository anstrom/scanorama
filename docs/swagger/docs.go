// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Scanorama Support",
            "url": "https://github.com/anstrom/scanorama"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/anstrom/scanorama/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns admin status info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Admin status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.AdminStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/discovery": {
            "get": {
                "description": "Endpoint not yet implemented",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Not implemented",
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint not yet implemented",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Not implemented",
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns service health status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/docs.HealthResponse"
                        }
                    }
                }
            }
        },
        "/hosts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get discovered hosts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "List hosts",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by IP",
                        "name": "ip_address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by hostname",
                        "name": "hostname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.PaginatedHostsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/hosts/{hostId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get host details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Get host",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Host ID",
                        "name": "hostId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.HostResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Returns Prometheus metrics",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Application metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "description": "Endpoint not yet implemented",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Not implemented",
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint not yet implemented",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Not implemented",
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scans": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get paginated list of scans",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scans"
                ],
                "summary": "List scans",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "running",
                            "completed",
                            "failed",
                            "cancelled"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by target",
                        "name": "target",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.PaginatedScansResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new network scan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scans"
                ],
                "summary": "Create scan",
                "parameters": [
                    {
                        "description": "Scan config",
                        "name": "scan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.CreateScanRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/docs.ScanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scans/{scanId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get scan details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scans"
                ],
                "summary": "Get scan",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Scan ID",
                        "name": "scanId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.ScanResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancel or delete scan",
                "tags": [
                    "Scans"
                ],
                "summary": "Delete scan",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Scan ID",
                        "name": "scanId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "description": "Endpoint not yet implemented",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Not implemented",
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint not yet implemented",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Not implemented",
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Returns detailed system status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "System status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.StatusResponse"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Returns version and build info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Version information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs.VersionResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "docs.AdminStatusResponse": {
            "type": "object",
            "properties": {
                "admin_status": {
                    "type": "string",
                    "example": "active"
                },
                "server_info": {
                    "type": "object",
                    "additionalProperties": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "docs.CreateScanRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Regular security assessment"
                },
                "name": {
                    "type": "string",
                    "example": "Weekly security scan"
                },
                "profile_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "scan_options": {
                    "type": "object",
                    "additionalProperties": true
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "192.168.1.0/24"
                    ]
                }
            }
        },
        "docs.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request"
                },
                "request_id": {
                    "type": "string",
                    "example": "req-123"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "docs.HealthResponse": {
            "type": "object",
            "properties": {
                "checks": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string",
                    "example": "2h30m45s"
                }
            }
        },
        "docs.HostResponse": {
            "type": "object",
            "properties": {
                "first_seen": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string",
                    "example": "server01.local"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "ip_address": {
                    "type": "string",
                    "example": "192.168.1.100"
                },
                "last_seen": {
                    "type": "string"
                },
                "mac_address": {
                    "type": "string",
                    "example": "00:1B:44:11:3A:B7"
                },
                "open_ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        22,
                        80,
                        443
                    ]
                },
                "scan_count": {
                    "type": "integer",
                    "example": 5
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "up",
                        "down",
                        "unknown"
                    ],
                    "example": "up"
                }
            }
        },
        "docs.PaginatedHostsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs.HostResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/docs.PaginationInfo"
                }
            }
        },
        "docs.PaginatedScansResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs.ScanResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/docs.PaginationInfo"
                }
            }
        },
        "docs.PaginationInfo": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 20
                },
                "total_items": {
                    "type": "integer",
                    "example": 150
                },
                "total_pages": {
                    "type": "integer",
                    "example": 8
                }
            }
        },
        "docs.ScanResponse": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "duration": {
                    "type": "string",
                    "example": "14m30s"
                },
                "error_message": {
                    "type": "string"
                },
                "hosts_discovered": {
                    "type": "integer",
                    "example": 25
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "ports_scanned": {
                    "type": "integer",
                    "example": 2500
                },
                "profile_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "progress": {
                    "type": "number",
                    "example": 65.5
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "running",
                        "completed",
                        "failed",
                        "cancelled"
                    ],
                    "example": "running"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "192.168.1.0/24"
                    ]
                }
            }
        },
        "docs.StatusResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string",
                    "example": "scanorama-api"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string",
                    "example": "2h30m45s"
                },
                "version": {
                    "type": "string",
                    "example": "0.7.0"
                }
            }
        },
        "docs.VersionResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string",
                    "example": "scanorama"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "example": "0.7.0"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key for authentication",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.7.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Scanorama API",
	Description:      "Enterprise-grade network scanning and discovery service with automated reconnaissance capabilities\n\n## Features\n- **Advanced Scanning Engine**: Multiple scan types (connect, SYN, version, comprehensive, aggressive, stealth)\n- **Enterprise Reliability**: Race condition-free worker pools with graceful shutdown\n- **Database Integration**: PostgreSQL persistence with automatic migrations and transaction support\n- **Real-time Updates**: WebSocket support for live scan progress and results\n- **Comprehensive API**: RESTful endpoints with full CRUD operations\n- **Monitoring & Observability**: Built-in metrics, structured logging, and health checks\n- **Security**: Vulnerability scanning integration and secure error handling\n- **Scheduling**: Automated scan jobs with cron-like scheduling\n- **High Performance**: Concurrent processing with configurable rate limiting\n\n## Quality Assurance\n- **Test Coverage**: >90% coverage on core packages with comprehensive integration tests\n- **Security**: Zero known vulnerabilities with automated security scanning\n- **Code Quality**: Zero linting issues with automated quality checks\n\n## Authentication\nAPI key authentication can be enabled. Include your API key in the `X-API-Key` header when required.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
