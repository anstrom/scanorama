// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metrics/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/metrics/interface.go -destination=internal/metrics/mocks/mock_registry.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	metrics "github.com/anstrom/scanorama/internal/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricsRegistry is a mock of MetricsRegistry interface.
type MockMetricsRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRegistryMockRecorder
	isgomock struct{}
}

// MockMetricsRegistryMockRecorder is the mock recorder for MockMetricsRegistry.
type MockMetricsRegistryMockRecorder struct {
	mock *MockMetricsRegistry
}

// NewMockMetricsRegistry creates a new mock instance.
func NewMockMetricsRegistry(ctrl *gomock.Controller) *MockMetricsRegistry {
	mock := &MockMetricsRegistry{ctrl: ctrl}
	mock.recorder = &MockMetricsRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRegistry) EXPECT() *MockMetricsRegistryMockRecorder {
	return m.recorder
}

// Counter mocks base method.
func (m *MockMetricsRegistry) Counter(name string, labels metrics.Labels) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Counter", name, labels)
}

// Counter indicates an expected call of Counter.
func (mr *MockMetricsRegistryMockRecorder) Counter(name, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockMetricsRegistry)(nil).Counter), name, labels)
}

// Gauge mocks base method.
func (m *MockMetricsRegistry) Gauge(name string, value float64, labels metrics.Labels) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Gauge", name, value, labels)
}

// Gauge indicates an expected call of Gauge.
func (mr *MockMetricsRegistryMockRecorder) Gauge(name, value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockMetricsRegistry)(nil).Gauge), name, value, labels)
}

// GetMetrics mocks base method.
func (m *MockMetricsRegistry) GetMetrics() map[string]*metrics.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(map[string]*metrics.Metric)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsRegistryMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricsRegistry)(nil).GetMetrics))
}

// Histogram mocks base method.
func (m *MockMetricsRegistry) Histogram(name string, value float64, labels metrics.Labels) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Histogram", name, value, labels)
}

// Histogram indicates an expected call of Histogram.
func (mr *MockMetricsRegistryMockRecorder) Histogram(name, value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockMetricsRegistry)(nil).Histogram), name, value, labels)
}

// IsEnabled mocks base method.
func (m *MockMetricsRegistry) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockMetricsRegistryMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockMetricsRegistry)(nil).IsEnabled))
}

// Reset mocks base method.
func (m *MockMetricsRegistry) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockMetricsRegistryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMetricsRegistry)(nil).Reset))
}

// SetEnabled mocks base method.
func (m *MockMetricsRegistry) SetEnabled(enabled bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnabled", enabled)
}

// SetEnabled indicates an expected call of SetEnabled.
func (mr *MockMetricsRegistryMockRecorder) SetEnabled(enabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnabled", reflect.TypeOf((*MockMetricsRegistry)(nil).SetEnabled), enabled)
}
