version: '3.8'

services:
  # Scanorama application
  scanorama:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-dev}
        COMMIT: ${COMMIT:-unknown}
        BUILD_TIME: ${BUILD_TIME:-unknown}
    container_name: scanorama-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SCANORAMA_DATABASE_HOST=postgres
      - SCANORAMA_DATABASE_PORT=5432
      - SCANORAMA_DATABASE_DATABASE=scanorama
      - SCANORAMA_DATABASE_USERNAME=scanorama
      - SCANORAMA_DATABASE_PASSWORD=scanorama_password
      - SCANORAMA_DATABASE_SSL_MODE=disable
      - SCANORAMA_LOG_LEVEL=info
      - SCANORAMA_LOG_FORMAT=json
      - SCANORAMA_SCANNING_WORKER_POOL_SIZE=10
      - SCANORAMA_API_PORT=8080
    volumes:
      - ./config.yaml:/app/config/config.yaml:ro
      - scanorama_logs:/app/logs
      - scanorama_data:/app/data
      # Mount static directory for frontend assets
      - ./static:/app/static:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scanorama-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: scanorama-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=scanorama
      - POSTGRES_USER=scanorama
      - POSTGRES_PASSWORD=scanorama_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - scanorama-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scanorama -d scanorama"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: scanorama-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass scanorama_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - scanorama-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy and static file server
  nginx:
    image: nginx:alpine
    container_name: scanorama-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - scanorama
    networks:
      - scanorama-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scanorama_logs:
    driver: local
  scanorama_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  scanorama-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
