name: Test and Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GOPRIVATE: github.com/anstrom/*

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.0"
          cache: false

      - name: Clean module cache
        run: |
          go clean -modcache
          rm -rf $(go env GOMODCACHE)

      - name: Install dependencies
        run: |
          go mod download -x
          go mod verify
          go mod tidy

      - name: Verify Go environment
        run: |
          echo "Go version: $(go version)"
          echo "Go env GOOS: $(go env GOOS)"
          echo "Go env GOARCH: $(go env GOARCH)"
          echo "Go env GOMODCACHE: $(go env GOMODCACHE)"
          echo "GOPRIVATE: ${GOPRIVATE}"
          echo "Module info:"
          go list -m all
          echo "Package structure:"
          go list ./...

      - name: Verify internal package
        run: |
          echo "Checking internal package exports:"
          go doc ./internal
          echo "Checking specific functions:"
          grep -n "func.*RunScanWithContext\|func.*PrintResults\|func.*RunScan" internal/scan.go || echo "Functions not found"

      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Verify golangci-lint configuration
        run: |
          $(go env GOPATH)/bin/golangci-lint config verify
          echo "Configuration verified successfully"

      - name: Run linting
        run: |
          $(go env GOPATH)/bin/golangci-lint run --verbose --timeout=10m
        timeout-minutes: 12

      - name: Build project
        run: make build

      - name: Run tests
        run: make test

      - name: Generate coverage
        run: make coverage

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.out.html
          if-no-files-found: warn

  build:
    runs-on: ubuntu-latest
    needs: test
    env:
      GOPRIVATE: github.com/anstrom/*

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.0"
          cache: false

      - name: Install dependencies
        run: |
          go mod download -x
          go mod verify
          go mod tidy

      - name: Build binary
        run: make build

      - name: Test binary
        run: ./build/scanorama -version

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: scanorama-binary
          path: build/scanorama
          if-no-files-found: error
