name: Full Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    env:
      GOPRIVATE: github.com/anstrom/*
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: scanorama_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare test fixtures directory
        run: |
          mkdir -p test/fixtures
          cp -r internal/db/001_initial_schema.sql test/fixtures/

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.0"
          cache: true

      - name: Install Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap redis-server ssh openssh-server

          # Make test scripts executable
          chmod +x ./test/docker/test-env.sh

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
          skip-pkg-cache: true
          skip-build-cache: true

      - name: Build project
        run: make build

      - name: Prepare database configuration
        run: |
          # Create database configuration file
          mkdir -p test/fixtures
          cat > test/fixtures/database.yml << EOF
          test:
            host: localhost
            port: 5432
            database: scanorama_test
            username: test_user
            password: test_password
            ssl_mode: disable
          EOF

      - name: Run tests
        run: |
          # Run tests directly using GitHub Actions PostgreSQL service
          go test -v ./...

      - name: Generate coverage
        run: |
          # Generate coverage
          go test -cover ./... -coverprofile=coverage.out
          go tool cover -html=coverage.out -o coverage.out.html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.out.html
          if-no-files-found: warn

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    env:
      GOPRIVATE: github.com/anstrom/*

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.0"
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        run: make build

      - name: Test binary
        run: ./build/scanorama -version

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: scanorama-binary
          path: build/scanorama
          if-no-files-found: error
