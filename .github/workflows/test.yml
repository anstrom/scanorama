name: Test and Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"
          cache: true
          cache-dependency-path: go.sum

      - name: Verify Go installation
        run: |
          go version
          go env GOROOT
          go env GOPATH

      - name: Clean module cache
        run: go clean -modcache || true

      - name: Complete module reload
        run: |
          echo "=== Cleaning all caches ==="
          go clean -cache
          go clean -modcache
          go clean -testcache
          echo "=== Removing vendor and build artifacts ==="
          rm -rf vendor/ || true
          rm -rf build/ || true
          echo "=== Reinitializing modules ==="
          go mod download
          go mod tidy
          go mod verify
          echo "=== Verifying package resolution ==="
          go list -m all
          go list ./...

      - name: Debug Go environment
        run: |
          echo "=== Go Environment ==="
          go version
          go env
          echo "=== Module Status ==="
          go list -m all
          echo "=== File Structure ==="
          find . -name "*.go" | head -10
          echo "=== Module Graph ==="
          go mod graph | head -10

      - name: Run linting
        run: make lint

      - name: Build project to catch compilation issues
        run: |
          echo "=== Building main binary ==="
          go build -v ./cmd/scanorama
          echo "=== Building internal package ==="
          go build -v ./internal
          echo "=== Running go list on all packages ==="
          go list -e ./...

      - name: Debug before tests
        run: |
          echo "=== Checking functions in scan.go ==="
          grep -n "func.*Run" internal/scan.go || echo "No Run functions found"
          echo "=== Checking imports in main.go ==="
          grep -n "internal\." cmd/scanorama/main.go || echo "No internal imports found"

      - name: Verify package imports and exports
        run: |
          echo "=== Verifying internal package compilation ==="
          go build -v ./internal
          echo "=== Checking internal package imports ==="
          go list -f '{{.ImportPath}} -> {{.Dir}}' ./internal
          echo "=== Checking what's exported from internal ==="
          go list -f '{{.Name}}: {{.GoFiles}}' ./internal
          echo "=== Checking cmd/scanorama imports ==="
          go list -f '{{.Imports}}' ./cmd/scanorama
          echo "=== Testing internal package access ==="
          echo 'package main; import "github.com/anstrom/scanorama/internal"; func main() { _ = internal.RunScan }' > /tmp/test_import.go
          go build -o /tmp/test_import /tmp/test_import.go || echo "FAILED: Cannot access internal.RunScan"
          echo "=== Testing specific function access ==="
          go doc github.com/anstrom/scanorama/internal.RunScan || echo "RunScan not found in docs"
          go doc github.com/anstrom/scanorama/internal.RunScanWithContext || echo "RunScanWithContext not found in docs"

      - name: Run tests
        run: make test

      - name: Generate coverage report
        run: make coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.out.html
          if-no-files-found: warn

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"
          cache: true
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build binary
        run: make build

      - name: Test binary
        run: |
          ./build/scanorama -version
          ./build/scanorama -targets 127.0.0.1 -ports 80 -type connect || echo "Expected failure - no target service"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: scanorama-binary
          path: build/scanorama
          if-no-files-found: error
