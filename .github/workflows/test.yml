name: Test and Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"
          cache: false

      - name: Verify Go installation
        run: |
          go version
          go env GOROOT
          go env GOPATH

      - name: Clean Go caches
        run: |
          go clean -cache || true
          go clean -modcache || true
          go clean -testcache || true

      - name: Force consistent module resolution
        env:
          GOTOOLCHAIN: go1.24.5
          GO111MODULE: on
          GOPROXY: https://proxy.golang.org,direct
          GOSUMDB: sum.golang.org
        run: |
          echo "=== Go environment ==="
          go version
          go env GOTOOLCHAIN
          echo "=== Removing all artifacts ==="
          rm -rf vendor/ build/ || true
          echo "=== Complete module reload ==="
          go mod download -x
          go mod tidy -v
          go mod verify
          echo "=== Force package compilation ==="
          go build -a -v ./internal
          go build -a -v ./cmd/scanorama
          echo "=== Verify all packages ==="
          go list -e -f '{{.ImportPath}}: {{.Error}}' ./...

      - name: Debug Go environment
        run: |
          echo "=== Go Environment ==="
          go version
          go env
          echo "=== Module Status ==="
          go list -m all
          echo "=== File Structure ==="
          find . -name "*.go" | head -10
          echo "=== Module Graph ==="
          go mod graph | head -10

      - name: Run golangci-lint
        env:
          GOTOOLCHAIN: go1.24.5
        run: make lint

      - name: Build project
        env:
          GOTOOLCHAIN: go1.24.5
        run: make build

      - name: Run tests
        env:
          GOTOOLCHAIN: go1.24.5
        run: make test

      - name: Generate coverage report
        run: make coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.out.html
          if-no-files-found: warn

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"
          cache: true
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build binary
        run: make build

      - name: Test binary
        run: |
          ./build/scanorama -version
          ./build/scanorama -targets 127.0.0.1 -ports 80 -type connect || echo "Expected failure - no target service"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: scanorama-binary
          path: build/scanorama
          if-no-files-found: error
