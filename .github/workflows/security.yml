name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

env:
  GO_VERSION: "1.24.6"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Check for known vulnerabilities in dependencies
        run: |
          go list -json -deps ./... | jq -r '.Module | select(.Path != null) | .Path + "@" + .Version' | sort -u > deps.txt
          echo "üì¶ Dependencies scanned:"
          cat deps.txt
          echo "‚úÖ Vulnerability scan completed"

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify Go installation
        run: |
          echo "Go version: $(go version)"
          echo "GOPATH: $(go env GOPATH)"
          echo "GOROOT: $(go env GOROOT)"
          which go

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          config: |
            paths-ignore:
              - "**/*_test.go"
              - "**/testdata/**"
              - "**/vendor/**"

      - name: Download dependencies
        run: |
          echo "Downloading Go modules..."
          go mod download
          go mod verify

      - name: Build Go code
        run: |
          echo "Building Go code for CodeQL analysis..."
          go build -v ./cmd/...
          go build -v ./internal/...
          echo "Build completed successfully"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  security-hardening:
    name: Security Hardening Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check file permissions
        run: |
          echo "üîí Checking file permissions..."

          # Find files with overly permissive permissions
          find . -type f -perm /o+w -not -path "./.git/*" -not -path "./build/*" -not -path "./dist/*" | while read file; do
            echo "‚ö†Ô∏è World-writable file found: $file"
          done

          # Check for executable files that shouldn't be
          find . -name "*.go" -perm /a+x -not -path "./.git/*" | while read file; do
            echo "‚ö†Ô∏è Executable Go file found: $file"
          done

          echo "‚úÖ File permission check completed"

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Run npm audit
        run: |
          echo "üîç Running npm security audit..."
          npm audit --audit-level moderate
          echo "‚úÖ NPM audit completed"

      - name: Check for outdated packages
        run: |
          echo "üì¶ Checking for outdated packages..."
          npm outdated || true
          echo "‚ÑπÔ∏è Outdated package check completed"

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check Go module licenses
        run: |
          echo "üìÑ Checking Go module licenses..."

          # Install go-licenses tool
          go install github.com/google/go-licenses@latest

          # Generate license report first
          echo "Generating license report..."
          go-licenses report ./... > licenses-report.txt || {
            echo "‚ö†Ô∏è Could not generate complete license report, proceeding with basic check"
          }

          # Check licenses (allow common permissive licenses)
          go-licenses check ./... --allowed_licenses=Apache-2.0,MIT,BSD-2-Clause,BSD-3-Clause,ISC,MPL-2.0 || {
            echo "‚ùå License compliance check failed"
            echo "üìã License report:"
            cat licenses-report.txt 2>/dev/null || echo "No license report available"
            echo ""
            echo "To see detailed license information, run: go-licenses report ./..."
            exit 1
          }

          echo "‚úÖ License compliance check passed"
          echo "üìã All dependencies use approved licenses"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      [
        vulnerability-scan,
        codeql-analysis,
        security-hardening,
        npm-audit,
        license-compliance,
      ]
    if: always()
    steps:
      - name: Security pipeline summary
        run: |
          echo "üîí Security Pipeline Summary:"
          echo "- Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}"
          echo "- Security Hardening: ${{ needs.security-hardening.result }}"
          echo "- NPM Audit: ${{ needs.npm-audit.result }}"
          echo "- License Compliance: ${{ needs.license-compliance.result }}"

          # Count failures and provide detailed feedback
          FAILURES=0
          FAILED_JOBS=""

          if [[ "${{ needs.vulnerability-scan.result }}" == "failure" ]]; then
            echo "‚ùå Vulnerability scan failed"
            FAILURES=$((FAILURES + 1))
            FAILED_JOBS="$FAILED_JOBS vulnerability-scan"
          fi
          if [[ "${{ needs.codeql-analysis.result }}" == "failure" ]]; then
            echo "‚ùå CodeQL analysis failed"
            FAILURES=$((FAILURES + 1))
            FAILED_JOBS="$FAILED_JOBS codeql-analysis"
          fi
          if [[ "${{ needs.security-hardening.result }}" == "failure" ]]; then
            echo "‚ùå Security hardening check failed"
            FAILURES=$((FAILURES + 1))
            FAILED_JOBS="$FAILED_JOBS security-hardening"
          fi
          if [[ "${{ needs.npm-audit.result }}" == "failure" ]]; then
            echo "‚ùå NPM audit failed"
            FAILURES=$((FAILURES + 1))
            FAILED_JOBS="$FAILED_JOBS npm-audit"
          fi
          if [[ "${{ needs.license-compliance.result }}" == "failure" ]]; then
            echo "‚ùå License compliance check failed"
            FAILURES=$((FAILURES + 1))
            FAILED_JOBS="$FAILED_JOBS license-compliance"
          fi

          if [ "$FAILURES" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è $FAILURES security check(s) failed: $FAILED_JOBS"
            echo ""
            echo "üîß Remediation steps:"
            echo "1. Review the failed job logs above"
            echo "2. Address identified security issues"
            echo "3. Run 'make security' locally to verify fixes"
            echo "4. Re-run the security pipeline"
            echo ""
            exit 1
          fi

          echo "‚úÖ All security checks passed!"
          echo "üîí Security pipeline completed successfully"
