name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: "1.24.5"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc, or dev)
          if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Release version: $VERSION"
          echo "Is prerelease: $(echo $VERSION | grep -E '(alpha|beta|rc|dev)' && echo true || echo false)"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test -race -p 1 ./...

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.validate.outputs.version }}
        run: |
          BINARY_NAME="scanorama${{ matrix.suffix }}"
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          COMMIT=$(git rev-parse --short HEAD)

          LDFLAGS="-X 'main.version=$VERSION' -X 'main.commit=$COMMIT' -X 'main.buildTime=$BUILD_TIME' -s -w"

          mkdir -p dist
          go build -ldflags "$LDFLAGS" -o dist/scanorama-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} ./cmd/scanorama

          # Create archive
          cd dist
          tar -czf scanorama-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz scanorama-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 7

  checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Collect binaries and generate checksums
        run: |
          mkdir -p release

          # Copy all binaries and archives to release directory
          find artifacts -name "*.tar.gz" -o -name "scanorama-*" | while read file; do
            cp "$file" release/
          done

          # Generate checksums
          cd release
          sha256sum * > checksums.txt

          # Show what we have
          echo "Release artifacts:"
          ls -la
          echo "Checksums:"
          cat checksums.txt

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release/
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, checksums]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-artifacts
          path: release/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n 1)

          echo "## Changes" > RELEASE_NOTES.md

          if [ -n "$PREV_TAG" ]; then
            echo "### Commits since $PREV_TAG" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> RELEASE_NOTES.md
          else
            echo "### All commits" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
          fi

          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Download the appropriate binary for your platform from the assets below." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Linux/macOS" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "# Download and extract" >> RELEASE_NOTES.md
          echo "curl -LO https://github.com/${{ github.repository }}/releases/download/$VERSION/scanorama-linux-amd64.tar.gz" >> RELEASE_NOTES.md
          echo "tar -xzf scanorama-linux-amd64.tar.gz" >> RELEASE_NOTES.md
          echo "chmod +x scanorama-linux-amd64" >> RELEASE_NOTES.md
          echo "./scanorama-linux-amd64 version" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### macOS (Apple Silicon)" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "# Download and extract" >> RELEASE_NOTES.md
          echo "curl -LO https://github.com/${{ github.repository }}/releases/download/$VERSION/scanorama-darwin-arm64.tar.gz" >> RELEASE_NOTES.md
          echo "tar -xzf scanorama-darwin-arm64.tar.gz" >> RELEASE_NOTES.md
          echo "chmod +x scanorama-darwin-arm64" >> RELEASE_NOTES.md
          echo "./scanorama-darwin-arm64 version" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Verification" >> RELEASE_NOTES.md
          echo "All binaries can be verified using the provided checksums.txt file:" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "sha256sum -c checksums.txt" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: release/*
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release (if not prerelease)
        if: needs.validate.outputs.is_prerelease == 'false'
        run: |
          echo "This is a stable release - marked as latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
