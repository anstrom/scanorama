name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: "1.24.6"
  NODE_VERSION: "22"

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  # Stage 1: Code Quality & Security (runs in parallel)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not properly formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          skip-cache: false
          skip-save-cache: false

      - name: Verify dependencies
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

  # Stage 2: Unit Tests (fast tests, no external dependencies)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -short -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out | tail -1

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # Stage 3: Integration Tests (requires database and services)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: scanorama_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:8-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: scanorama_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_URL: redis://localhost:6379
      # Test database configuration
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_NAME: scanorama_test
      TEST_DB_USER: postgres
      TEST_DB_PASSWORD: postgres
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap

      - name: Wait for services
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y redis-tools
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 1; done'

      - name: Create test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE scanorama_test;" || echo "Database may already exist"
          PGPASSWORD=postgres psql -h localhost -U postgres -d scanorama_test -c "SELECT 1;" > /dev/null && echo "‚úÖ Test database is ready"

      - name: Run integration tests
        run: |
          # Run all tests (including integration tests that need database)
          go test -v -p 1 ./...

      - name: Run database migration tests
        run: |
          go test -v ./internal/db/... -tags=integration

  # Stage 4: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap redis-server openssh-server

      - name: Setup test environment
        run: |
          sudo systemctl start redis-server
          sudo systemctl start ssh

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        run: make build

      - name: Run end-to-end tests
        run: |
          go test -v ./test/integration_test.go

  # Stage 5: Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=$(git describe --tags --always --dirty)
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          BINARY_NAME=scanorama
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build -ldflags="-w -s -X 'main.version=${VERSION}' -X 'main.commit=${COMMIT}' -X 'main.buildTime=${BUILD_TIME}'" \
            -o "build/${BINARY_NAME}-${GOOS}-${GOARCH}" \
            ./cmd/scanorama

      - name: Test binary
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: |
          ./build/scanorama-linux-amd64 --version
          ./build/scanorama-linux-amd64 --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scanorama-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/scanorama-*
          retention-days: 7

  # Stage 6: Documentation & API Validation
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install documentation dependencies
        run: |
          npm install
          go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate API documentation
        run: |
          make docs-generate

      - name: Validate OpenAPI spec
        run: |
          npm run docs:validate
          npm run spectral:lint

      - name: Test client generation
        run: |
          npm run test:clients

      - name: Build documentation
        run: |
          npm run docs:build

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/swagger/
            docs/*.md
          retention-days: 30

  # Stage 7: Docker Build & Test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            scanorama:latest
            scanorama:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm scanorama:latest --version
          docker run --rm scanorama:latest --help

  # Final Stage: Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs:
      [
        code-quality,
        unit-tests,
        integration-tests,
        e2e-tests,
        build,
        documentation,
        docker,
      ]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "üîç CI Pipeline Summary:"
          echo "- Code Quality: ${{ needs.code-quality.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- End-to-End Tests: ${{ needs.e2e-tests.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Documentation: ${{ needs.documentation.result }}"
          echo "- Docker: ${{ needs.docker.result }}"

          # Fail if critical jobs failed
          if [[ "${{ needs.code-quality.result }}" == "failure" ||
                "${{ needs.unit-tests.result }}" == "failure" ||
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå Critical jobs failed"
            exit 1
          fi

          echo "‚úÖ CI Pipeline completed successfully!"
