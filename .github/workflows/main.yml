name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_call:

env:
  GO_VERSION: "1.25.1"
  NODE_VERSION: "22"

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  # Stage 1: Code Quality & Security (runs in parallel)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not properly formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          skip-cache: false
          skip-save-cache: false

      - name: Verify dependencies
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

  # Stage 2: Unit Tests (fast tests, no external dependencies)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -short -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out | tail -1

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # Stage 3: Integration Tests (requires database and services)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]

    services:
      postgres:
        image: postgres:18-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:8-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Test services for scan tests
      nginx:
        image: nginx:alpine
        ports:
          - 8080:80
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:80 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      ssh:
        image: lscr.io/linuxserver/openssh-server:latest
        ports:
          - 8022:2222
        env:
          PUID: 1000
          PGID: 1000
          PASSWORD_ACCESS: true
          USER_PASSWORD: testpass
          USER_NAME: testuser
        options: >-
          --health-cmd "ps aux | grep sshd"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      test-redis:
        image: redis:8-alpine
        ports:
          - 8379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: scanorama_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_URL: redis://localhost:6379
      # Test database configuration
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_NAME: scanorama_test
      TEST_DB_USER: scanorama_test_user
      TEST_DB_PASSWORD: test_password_123
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap

      - name: Wait for services
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y redis-tools wget netcat-openbsd
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 1; done'
          timeout 30 bash -c 'until wget --quiet --tries=1 --spider http://localhost:8080; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 8379 ping | grep -q PONG; do sleep 1; done'
          timeout 30 bash -c 'until nc -z localhost 8022; do sleep 1; done'

      - name: Create test database and user
        run: |
          # Create test user
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE USER scanorama_test_user WITH PASSWORD 'test_password_123';" || echo "User may already exist"

          # Create test database
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE scanorama_test OWNER scanorama_test_user;" || echo "Database may already exist"

          # Grant permissions
          PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE scanorama_test TO scanorama_test_user;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d scanorama_test -c "GRANT ALL ON SCHEMA public TO scanorama_test_user;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d scanorama_test -c "GRANT CREATE ON SCHEMA public TO scanorama_test_user;"

          # Verify test database is ready
          PGPASSWORD=test_password_123 psql -h localhost -U scanorama_test_user -d scanorama_test -c "SELECT 1;" > /dev/null && echo "✅ Test database is ready"

      - name: Run integration tests
        run: |
          # Run all tests (including integration tests that need database)
          go test -v -p 1 ./...

      - name: Run database migration tests
        run: |
          go test -v ./internal/db/... -tags=integration

  # Stage 4: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:18-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: scanorama_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_NAME: scanorama_test
      TEST_DB_USER: scanorama_test_user
      TEST_DB_PASSWORD: test_password_123
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap redis-server openssh-server

      - name: Setup test environment
        run: |
          sudo systemctl start redis-server
          sudo systemctl start ssh

          # Wait for PostgreSQL
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'

          # Create test database and user
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE USER scanorama_test_user WITH PASSWORD 'test_password_123';" || echo "User may already exist"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE scanorama_test OWNER scanorama_test_user;" || echo "Database may already exist"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE scanorama_test TO scanorama_test_user;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d scanorama_test -c "GRANT ALL ON SCHEMA public TO scanorama_test_user;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d scanorama_test -c "GRANT CREATE ON SCHEMA public TO scanorama_test_user;"

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        run: make build

      - name: Run end-to-end tests
        run: |
          go test -v ./test/integration_test.go

  # Stage 5: Documentation & API Validation
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install documentation dependencies
        run: |
          npm install
          go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate API documentation
        run: |
          make docs-generate

      - name: Validate OpenAPI spec
        run: |
          npm run docs:validate
          npm run spectral:lint

      - name: Test client generation
        run: |
          npm run test:clients

      - name: Build documentation
        run: |
          npm run docs:build

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v5
        with:
          name: documentation
          path: |
            docs/swagger/
            docs/*.md
          retention-days: 30

  # Final Stage: Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs:
      [code-quality, unit-tests, integration-tests, e2e-tests, documentation]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "🔍 CI Pipeline Summary:"
          echo "- Code Quality: ${{ needs.code-quality.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- End-to-End Tests: ${{ needs.e2e-tests.result }}"
          echo "- Documentation: ${{ needs.documentation.result }}"

          # Fail if critical jobs failed
          if [[ "${{ needs.code-quality.result }}" == "failure" ||
                "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed"
            exit 1
          fi

          echo "✅ CI Pipeline completed successfully!"
