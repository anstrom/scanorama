name: Integration Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile"
      - "config*.yaml"
      - "internal/**"
      - "cmd/**"
      - "migrations/**"
      - ".github/workflows/integration-tests.yml"
  pull_request:
    branches: [main]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile"
      - "config*.yaml"
      - "internal/**"
      - "cmd/**"
      - "migrations/**"
      - ".github/workflows/integration-tests.yml"
  workflow_dispatch:

env:
  GO_VERSION: "1.24.6"
  NODE_VERSION: "22"

permissions:
  contents: read
  checks: write
  statuses: write
  actions: read
  pull-requests: read

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: scanorama_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          go mod download
          go mod verify
          npm ci

      - name: Setup test database
        uses: ./.github/actions/setup-database
        with:
          database-name: scanorama_test
          database-user: test_user
          database-password: test_password

      - name: Build application
        run: make build

      - name: Start server for testing
        run: |
          echo "Starting server in background..."
          ./build/scanorama api --config config.test.yaml &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid

          # Wait for server to start
          echo "Waiting for server to start..."
          timeout 30 bash -c 'until curl -f http://localhost:8080/api/v1/health; do sleep 1; done'
          echo "✅ Server started successfully"

      - name: Test documented endpoints
        run: |
          echo "Testing that documented endpoints are actually available..."

          # Test basic endpoints
          curl -f http://localhost:8080/api/v1/health || echo "❌ Health endpoint failed"
          curl -f http://localhost:8080/api/v1/status || echo "❌ Status endpoint failed"
          curl -f http://localhost:8080/api/v1/version || echo "❌ Version endpoint failed"

          echo "✅ Basic endpoint validation completed"

      - name: Validate generated clients
        run: |
          echo "Validating generated API clients..."

          # Generate clients using npm scripts
          npm run openapi:generate-js
          npm run openapi:generate-ts

          # Verify client files exist
          if [ -f "dist/js-client/package.json" ]; then
            echo "✅ JavaScript client generated successfully"
          else
            echo "❌ JavaScript client generation failed"
            exit 1
          fi

          if [ -f "dist/ts-client/package.json" ]; then
            echo "✅ TypeScript client generated successfully"
          else
            echo "❌ TypeScript client generation failed"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            echo "Stopping server..."
            kill $(cat server.pid) || true
            rm -f server.pid
          fi
