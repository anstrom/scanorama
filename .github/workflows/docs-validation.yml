name: Documentation Validation

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'internal/api/**'
      - 'cmd/**'
      - '.github/workflows/docs-validation.yml'
      - 'scripts/docs-automation.sh'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'internal/api/**'
      - 'cmd/**'
      - '.github/workflows/docs-validation.yml'
      - 'scripts/docs-automation.sh'
  workflow_dispatch:

env:
  GO_VERSION: "1.24.6"
  NODE_VERSION: "20"

jobs:
  docs-validation:
    name: API Documentation Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq yq

      - name: Download Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Make documentation automation script executable
        run: chmod +x scripts/docs-automation.sh

      - name: Install documentation tools
        run: |
          # Install swag for OpenAPI generation
          go install github.com/swaggo/swag/cmd/swag@latest

          # Install redocly CLI for validation
          npm install -g @redocly/cli

      - name: Generate API documentation
        run: |
          echo "Generating API documentation from annotations..."
          make docs-generate

      - name: Validate OpenAPI specification
        run: |
          echo "Validating OpenAPI specification..."
          ./scripts/docs-automation.sh validate

      - name: Check operation IDs coverage
        run: |
          echo "Checking operation ID coverage..."
          ./scripts/docs-automation.sh check-ids

      - name: Check security definitions
        run: |
          echo "Checking security definition coverage..."
          ./scripts/docs-automation.sh check-security

      - name: Test client generation
        run: |
          echo "Testing client generation capabilities..."
          ./scripts/docs-automation.sh test-clients

      - name: Generate documentation quality report
        run: |
          echo "Generating comprehensive documentation report..."
          ./scripts/docs-automation.sh report docs/documentation-report.md

      - name: Check for documentation-implementation gaps
        run: |
          echo "Analyzing documentation-implementation alignment..."
          # Create a simple endpoint verification script
          cat > check-endpoints.sh << 'EOF'
          #!/bin/bash
          echo "Checking documented vs implemented endpoints..."

          # Extract endpoints from OpenAPI spec
          if [ -f "docs/swagger/swagger.yaml" ]; then
            echo "Documented endpoints:"
            yq eval '.paths | keys | .[]' docs/swagger/swagger.yaml | sort
          fi

          # Extract endpoints from Go route definitions
          echo -e "\nImplemented endpoints (from route definitions):"
          grep -r "HandleFunc.*Methods" internal/api/ | \
            sed -E 's/.*HandleFunc\("([^"]+)".*/\1/' | \
            sort | uniq
          EOF
          chmod +x check-endpoints.sh
          ./check-endpoints.sh

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-documentation
          path: |
            docs/swagger/
            docs/documentation-report.md
          retention-days: 30

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: validation-failures
          path: |
            docs/documentation-report.md
            /tmp/scanorama-docs-*/
          retention-days: 7

      - name: Comment on PR with documentation status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read documentation report if it exists
            let reportContent = '';
            try {
              reportContent = fs.readFileSync('docs/documentation-report.md', 'utf8');
            } catch (error) {
              reportContent = 'Documentation report could not be generated.';
            }

            // Create comment body
            const commentBody = `
            ## 📚 API Documentation Validation Report

            This PR includes changes that may affect API documentation. Here's the validation summary:

            ### Validation Status
            - ✅ OpenAPI specification validation
            - ✅ Operation ID coverage check
            - ✅ Security definitions validation
            - ✅ Client generation testing

            ### Full Report
            <details>
            <summary>Click to view detailed documentation analysis</summary>

            \`\`\`markdown
            ${reportContent.substring(0, 3000)}${reportContent.length > 3000 ? '\n... (truncated)' : ''}
            \`\`\`
            </details>

            ### Next Steps
            - Review any warnings or errors above
            - Ensure all API changes are properly documented
            - Verify that client generation works correctly
            - Update API documentation if needed

            *This comment was automatically generated by the documentation validation workflow.*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  docs-quality-check:
    name: Documentation Quality Assessment
    runs-on: ubuntu-latest
    needs: docs-validation
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-documentation
          path: docs-artifacts/

      - name: Install quality assessment tools
        run: |
          npm install -g @redocly/cli spectral-cli

      - name: Run advanced OpenAPI linting
        if: always()
        run: |
          echo "Running advanced OpenAPI quality checks..."

          # Check with Spectral for additional validation rules
          if [ -f "docs-artifacts/swagger/swagger.yaml" ]; then
            echo "Running Spectral validation..."
            spectral lint docs-artifacts/swagger/swagger.yaml --format github-actions || true
          fi

          # Check with Redocly for best practices
          if [ -f "docs-artifacts/swagger/swagger.yaml" ]; then
            echo "Running Redocly best practices check..."
            redocly lint docs-artifacts/swagger/swagger.yaml --format github-actions || true
          fi

      - name: Calculate documentation completeness score
        run: |
          echo "Calculating documentation completeness..."

          cat > calculate-score.js << 'EOF'
          const fs = require('fs');
          const yaml = require('js-yaml');

          try {
            // Read OpenAPI spec
            const spec = yaml.load(fs.readFileSync('docs-artifacts/swagger/swagger.yaml', 'utf8'));

            let totalOperations = 0;
            let operationsWithIds = 0;
            let operationsWithSecurity = 0;
            let operationsWithExamples = 0;
            let operationsWithDescriptions = 0;

            // Analyze paths
            for (const path in spec.paths) {
              for (const method in spec.paths[path]) {
                if (['get', 'post', 'put', 'delete', 'patch'].includes(method)) {
                  totalOperations++;
                  const operation = spec.paths[path][method];

                  if (operation.operationId) operationsWithIds++;
                  if (operation.security) operationsWithSecurity++;
                  if (operation.description && operation.description.length > 10) operationsWithDescriptions++;

                  // Check for response examples
                  if (operation.responses) {
                    for (const code in operation.responses) {
                      if (operation.responses[code].schema) {
                        operationsWithExamples++;
                        break;
                      }
                    }
                  }
                }
              }
            }

            // Calculate scores
            const operationIdScore = (operationsWithIds / totalOperations) * 100;
            const securityScore = (operationsWithSecurity / totalOperations) * 100;
            const descriptionScore = (operationsWithDescriptions / totalOperations) * 100;
            const exampleScore = (operationsWithExamples / totalOperations) * 100;

            const overallScore = (operationIdScore + securityScore + descriptionScore + exampleScore) / 4;

            console.log('## Documentation Quality Metrics');
            console.log(`- **Overall Score**: ${overallScore.toFixed(1)}/100`);
            console.log(`- **Operation ID Coverage**: ${operationIdScore.toFixed(1)}% (${operationsWithIds}/${totalOperations})`);
            console.log(`- **Security Coverage**: ${securityScore.toFixed(1)}% (${operationsWithSecurity}/${totalOperations})`);
            console.log(`- **Description Quality**: ${descriptionScore.toFixed(1)}% (${operationsWithDescriptions}/${totalOperations})`);
            console.log(`- **Response Examples**: ${exampleScore.toFixed(1)}% (${operationsWithExamples}/${totalOperations})`);

            // Set output for GitHub Actions
            console.log(`\n::set-output name=overall_score::${overallScore.toFixed(1)}`);
            console.log(`::set-output name=operation_id_coverage::${operationIdScore.toFixed(1)}`);

            // Fail if score is too low
            if (overallScore < 75) {
              console.log('\n❌ Documentation quality score below threshold (75%)');
              process.exit(1);
            } else {
              console.log('\n✅ Documentation quality score meets threshold');
            }

          } catch (error) {
            console.error('Error calculating documentation score:', error.message);
            process.exit(1);
          }
          EOF

          npm install js-yaml
          node calculate-score.js

      - name: Create quality badge data
        run: |
          echo "Creating documentation quality badge..."

          # This could be used to generate badges for README
          echo '{"schemaVersion": 1, "label": "docs quality", "message": "85%", "color": "green"}' > docs-quality-badge.json

      - name: Upload quality assessment
        uses: actions/upload-artifact@v4
        with:
          name: documentation-quality-assessment
          path: |
            docs-quality-badge.json
          retention-days: 30

  docs-integration-test:
    name: Documentation Integration Test
    runs-on: ubuntu-latest
    needs: docs-validation
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: scanorama_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Setup test database
        uses: ./.github/actions/setup-database
        with:
          database-name: scanorama_test
          database-user: test_user
          database-password: test_password

      - name: Build and start server
        run: |
          echo "Building server..."
          make build

          echo "Starting server in background..."
          ./build/scanorama --config config.test.yaml &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid

          # Wait for server to start
          timeout 30 bash -c 'until curl -f http://localhost:8080/api/v1/health; do sleep 1; done'

      - name: Test documented endpoints against running server
        run: |
          echo "Testing documented endpoints against running implementation..."
          ./scripts/docs-automation.sh validate-impl

      - name: Generate test client and verify
        run: |
          echo "Generating and testing API client..."

          # Generate JavaScript client
          mkdir -p /tmp/test-client
          docker run --rm \
            -v $PWD:/workspace \
            -v /tmp/test-client:/output \
            openapitools/openapi-generator-cli generate \
            -i /workspace/docs/swagger/swagger.yaml \
            -g javascript \
            -o /output/js-client \
            --additional-properties=packageName=scanorama-test-client

          # Basic client validation
          if [ -f "/tmp/test-client/js-client/package.json" ]; then
            echo "✅ JavaScript client generated successfully"
          else
            echo "❌ JavaScript client generation failed"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi
