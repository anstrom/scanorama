name: Documentation Validation

on:
  push:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "internal/api/**"
      - "cmd/**"
      - ".github/workflows/docs-validation.yml"
      - "package.json"
      - "package-lock.json"
  pull_request:
    branches: [main]
    paths:
      - "docs/**"
      - "internal/api/**"
      - "cmd/**"
      - ".github/workflows/docs-validation.yml"
      - "package.json"
      - "package-lock.json"
  workflow_dispatch:

env:
  GO_VERSION: "1.24.6"
  NODE_VERSION: "22"

jobs:
  docs-validation:
    name: API Documentation Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          go mod download
          go mod verify
          npm ci

      - name: Install system tools
        run: |
          # Install yq for YAML processing
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Generate API documentation
        run: make docs-generate

      - name: Validate OpenAPI specification
        run: make docs-validate

      - name: Run advanced linting with Vacuum
        run: make docs-spectral

      - name: Test client generation
        run: make docs-test-clients

      - name: Build HTML documentation
        run: make docs-build

      - name: Check operation IDs coverage
        run: |
          echo "Checking operation ID coverage..."
          TOTAL_OPS=$(npx yq eval '.paths.*.* | length' docs/swagger/swagger.yaml)
          OPS_WITH_IDS=$(npx yq eval '.paths.*.* | select(.operationId) | length' docs/swagger/swagger.yaml)
          echo "Operation ID coverage: $OPS_WITH_IDS/$TOTAL_OPS operations"

          if [ "$OPS_WITH_IDS" -eq "$TOTAL_OPS" ]; then
            echo "✅ All operations have operation IDs"
          else
            echo "❌ Missing operation IDs: $((TOTAL_OPS - OPS_WITH_IDS)) operations"
            exit 1
          fi

      - name: Verify required endpoints
        run: |
          echo "Verifying required endpoints are documented..."
          DOCUMENTED=$(npx yq eval '.paths | keys | length' docs/swagger/swagger.yaml)
          echo "Total documented endpoints: $DOCUMENTED"

          REQUIRED_ENDPOINTS=("/health" "/status" "/version" "/scans" "/hosts")
          for endpoint in "${REQUIRED_ENDPOINTS[@]}"; do
            if npx yq eval ".paths | has(\"$endpoint\")" docs/swagger/swagger.yaml | grep -q "true"; then
              echo "✅ $endpoint documented"
            else
              echo "⚠️  $endpoint not found (may use different path structure)"
            fi
          done

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-documentation
          path: |
            docs/swagger/
          retention-days: 30

      - name: Comment on PR with documentation status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = `
            ## 📚 API Documentation Validation Report

            This PR includes changes that may affect API documentation. Here's the validation summary:

            ### ✅ Validation Steps Completed
            - OpenAPI specification validation
            - Operation ID coverage check
            - Advanced linting with Spectral
            - Client generation testing
            - HTML documentation build

            ### 📊 Documentation Quality
            The documentation has been validated and all quality checks have passed.

            ### 🔗 Generated Documentation
            - HTML documentation is available in the artifacts
            - OpenAPI specification: \`docs/swagger/swagger.yaml\`
            - Generated clients tested successfully

            ### Next Steps
            - Review the generated documentation artifacts
            - Ensure all API changes are properly documented
            - Verify that the documentation matches your implementation

            *This comment was automatically generated by the documentation validation workflow.*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  docs-quality-metrics:
    name: Documentation Quality Assessment
    runs-on: ubuntu-latest
    needs: docs-validation
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-documentation
          path: docs-artifacts/

      - name: Install dependencies
        run: npm ci

      - name: Calculate documentation metrics
        run: |
          echo "Calculating documentation quality metrics..."

          if [ -f "docs-artifacts/swagger.yaml" ]; then
            SPEC_FILE="docs-artifacts/swagger.yaml"
          else
            echo "Using local swagger file for metrics"
            SPEC_FILE="docs/swagger/swagger.yaml"
          fi

          if [ -f "$SPEC_FILE" ]; then
            TOTAL_OPS=$(npx yq eval '.paths.*.* | length' "$SPEC_FILE")
            OPS_WITH_IDS=$(npx yq eval '.paths.*.* | select(.operationId) | length' "$SPEC_FILE")
            OPS_WITH_DESC=$(npx yq eval '.paths.*.* | select(.description) | length' "$SPEC_FILE")
            OPS_WITH_SUMMARY=$(npx yq eval '.paths.*.* | select(.summary) | length' "$SPEC_FILE")

            if [ "$TOTAL_OPS" -gt 0 ]; then
              ID_COVERAGE=$(( (OPS_WITH_IDS * 100) / TOTAL_OPS ))
              DESC_COVERAGE=$(( (OPS_WITH_DESC * 100) / TOTAL_OPS ))
              SUMMARY_COVERAGE=$(( (OPS_WITH_SUMMARY * 100) / TOTAL_OPS ))
              OVERALL_SCORE=$(( (ID_COVERAGE + DESC_COVERAGE + SUMMARY_COVERAGE) / 3 ))

              echo "## 📊 Documentation Quality Metrics"
              echo "- **Overall Score**: $OVERALL_SCORE/100"
              echo "- **Operation ID Coverage**: $ID_COVERAGE% ($OPS_WITH_IDS/$TOTAL_OPS)"
              echo "- **Description Coverage**: $DESC_COVERAGE% ($OPS_WITH_DESC/$TOTAL_OPS)"
              echo "- **Summary Coverage**: $SUMMARY_COVERAGE% ($OPS_WITH_SUMMARY/$TOTAL_OPS)"

              # Create badge data
              if [ "$OVERALL_SCORE" -ge 90 ]; then
                BADGE_COLOR="brightgreen"
                echo "✅ Excellent documentation quality!"
              elif [ "$OVERALL_SCORE" -ge 75 ]; then
                BADGE_COLOR="green"
                echo "✅ Good documentation quality"
              elif [ "$OVERALL_SCORE" -ge 60 ]; then
                BADGE_COLOR="yellow"
                echo "⚠️ Moderate documentation quality"
              else
                BADGE_COLOR="red"
                echo "❌ Documentation quality needs improvement"
              fi

              echo "{\"schemaVersion\": 1, \"label\": \"docs quality\", \"message\": \"${OVERALL_SCORE}%\", \"color\": \"${BADGE_COLOR}\"}" > docs-quality-badge.json
            else
              echo "❌ No operations found in OpenAPI spec"
              exit 1
            fi
          else
            echo "❌ OpenAPI specification not found"
            exit 1
          fi

      - name: Upload quality metrics
        uses: actions/upload-artifact@v4
        with:
          name: documentation-quality-metrics
          path: |
            docs-quality-badge.json
          retention-days: 30

  docs-integration-test:
    name: Documentation Integration Test
    runs-on: ubuntu-latest
    needs: docs-validation
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: scanorama_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          go mod download
          go mod verify
          npm ci

      - name: Setup test database
        uses: ./.github/actions/setup-database
        with:
          database-name: scanorama_test
          database-user: test_user
          database-password: test_password

      - name: Build application
        run: make build

      - name: Start server for testing
        run: |
          echo "Starting server in background..."
          ./build/scanorama --config config.test.yaml &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid

          # Wait for server to start
          echo "Waiting for server to start..."
          timeout 30 bash -c 'until curl -f http://localhost:8080/api/v1/health; do sleep 1; done'
          echo "✅ Server started successfully"

      - name: Test documented endpoints
        run: |
          echo "Testing that documented endpoints are actually available..."

          # Test basic endpoints
          curl -f http://localhost:8080/api/v1/health || echo "❌ Health endpoint failed"
          curl -f http://localhost:8080/api/v1/status || echo "❌ Status endpoint failed"
          curl -f http://localhost:8080/api/v1/version || echo "❌ Version endpoint failed"

          echo "✅ Basic endpoint validation completed"

      - name: Validate generated clients
        run: |
          echo "Validating generated API clients..."

          # Generate clients using npm scripts
          npm run openapi:generate-js
          npm run openapi:generate-ts

          # Verify client files exist
          if [ -f "dist/js-client/package.json" ]; then
            echo "✅ JavaScript client generated successfully"
          else
            echo "❌ JavaScript client generation failed"
            exit 1
          fi

          if [ -f "dist/ts-client/package.json" ]; then
            echo "✅ TypeScript client generated successfully"
          else
            echo "❌ TypeScript client generation failed"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            echo "Stopping server..."
            kill $(cat server.pid) || true
            rm -f server.pid
          fi
