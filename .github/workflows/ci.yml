name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24.6"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.5
          verify: false
          args: --timeout=5m --config .golangci.yml

  core-tests:
    name: Core Package Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run core package tests
        run: go test -v -race ./internal/errors ./internal/logging ./internal/metrics

      - name: Generate core package coverage
        run: |
          go test -race -coverprofile=coverage-core.out -covermode=atomic ./internal/errors ./internal/logging ./internal/metrics
          go tool cover -html=coverage-core.out -o coverage-core.html

      - name: Check core package coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage-core.out | tail -1 | awk '{print $3}' | sed 's/%//')
          echo "Core package coverage: ${coverage}%"
          if [ $(echo "${coverage} >= 90" | bc -l) -eq 1 ]; then
            echo "✅ Core package coverage threshold (90%) met: ${coverage}%"
          else
            echo "❌ Core package coverage below threshold (90%): ${coverage}%"
            exit 1
          fi

      - name: Upload core coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: core-coverage-report
          path: |
            coverage-core.out
            coverage-core.html
          retention-days: 30

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [core-tests]
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: scanorama_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s

      nginx:
        image: nginx:alpine
        ports:
          - 8080:80
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:80 || exit 1"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10

      redis:
        image: redis:alpine
        ports:
          - 8379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10

      openssh:
        image: lscr.io/linuxserver/openssh-server:latest
        env:
          PUID: 1000
          PGID: 1000
          PASSWORD_ACCESS: true
          USER_PASSWORD: testpass
          USER_NAME: testuser
        ports:
          - 8022:2222
        options: >-
          --health-cmd "ps aux | grep sshd"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap postgresql-client

      - name: Download Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Setup database
        uses: ./.github/actions/setup-database
        with:
          database-name: scanorama_test
          database-user: test_user
          database-password: test_password

      - name: Run integration tests
        env:
          POSTGRES_PORT: 5432
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: scanorama_test
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
        run: |
          # Run all tests but allow integration test failures
          go test -v -race -p 1 ./... || echo "⚠️ Some integration tests failed - this is informational only"

      - name: Generate coverage
        env:
          POSTGRES_PORT: 5432
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: scanorama_test
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
        run: |
          go test -race -p 1 -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  migration:
    name: Migration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: scanorama_migration_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_migration_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client

      - name: Download Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Setup database for migration testing
        uses: ./.github/actions/setup-database
        with:
          database-name: scanorama_migration_test
          database-user: migration_user
          database-password: migration_pass

      - name: Test migration system with fresh database
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: scanorama_migration_test
          TEST_DB_USER: migration_user
          TEST_DB_PASSWORD: migration_pass
        run: |
          echo "Testing migration system on fresh database..."

          # Create migration test
          cat > test_migration_fresh.go << 'EOF'
          package main

          import (
              "context"
              "fmt"
              "log"

              "github.com/anstrom/scanorama/internal/db"
          )

          func main() {
              dbConfig := db.Config{
                  Host:     "localhost",
                  Port:     5432,
                  Database: "scanorama_migration_test",
                  Username: "migration_user",
                  Password: "migration_pass",
                  SSLMode:  "disable",
              }

              ctx := context.Background()

              // Test migration on clean database
              fmt.Println("Testing migrations on fresh database...")
              database, err := db.ConnectAndMigrate(ctx, &dbConfig)
              if err != nil {
                  log.Fatalf("Fresh migration failed: %v", err)
              }
              defer database.Close()

              // Verify all expected migrations
              var migrations []string
              err = database.Select(&migrations, "SELECT name FROM schema_migrations ORDER BY id")
              if err != nil {
                  log.Fatalf("Failed to query migrations: %v", err)
              }

              expectedMigrations := []string{"001_initial_schema", "002_performance_improvements"}
              if len(migrations) != len(expectedMigrations) {
                  log.Fatalf("Expected %d migrations, got %d: %v", len(expectedMigrations), len(migrations), migrations)
              }

              for i, expected := range expectedMigrations {
                  if migrations[i] != expected {
                      log.Fatalf("Migration %d: expected %s, got %s", i, expected, migrations[i])
                  }
              }

              fmt.Printf("✅ All %d migrations applied correctly\n", len(migrations))

              // Test materialized views exist and work
              _, err = database.Exec("REFRESH MATERIALIZED VIEW host_summary")
              if err != nil {
                  log.Fatalf("Failed to refresh materialized view: %v", err)
              }

              fmt.Println("✅ Materialized views working correctly")

              // Test new functions exist and work
              var result int
              err = database.Get(&result, "SELECT cleanup_old_scan_data(365)")
              if err != nil {
                  log.Fatalf("Failed to test cleanup function: %v", err)
              }

              fmt.Println("✅ Migration functions working correctly")

              fmt.Println("✅ All migration tests passed!")
          }
          EOF

          go run test_migration_fresh.go
          rm test_migration_fresh.go

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, core-tests, test, migration]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Get version info
        id: version
        run: |
          # Get version from git tag or use commit SHA
          if [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi

          # Get commit SHA
          COMMIT=$(git rev-parse --short HEAD)

          # Get build time
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

          echo "Building version: $VERSION (commit: $COMMIT)"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Set binary name based on OS
          BINARY_NAME="scanorama"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="scanorama.exe"
          fi

          # Build with version info injected via ldflags
          VERSION="${{ steps.version.outputs.version }}"
          COMMIT="${{ steps.version.outputs.commit }}"
          BUILD_TIME="${{ steps.version.outputs.build_time }}"

          LDFLAGS="-X 'main.version=$VERSION' -X 'main.commit=$COMMIT' -X 'main.buildTime=$BUILD_TIME' -s -w"

          mkdir -p build
          go build -ldflags "$LDFLAGS" -o build/$BINARY_NAME ./cmd/scanorama

          # Create artifact directory
          mkdir -p dist
          mv build/$BINARY_NAME dist/scanorama-${{ matrix.goos }}-${{ matrix.goarch }}${BINARY_NAME#scanorama}

      - name: Test binary (Linux only)
        if: matrix.goos == 'linux'
        run: |
          chmod +x dist/scanorama-${{ matrix.goos }}-${{ matrix.goarch }}
          ./dist/scanorama-${{ matrix.goos }}-${{ matrix.goarch }} --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 30

  integration:
    name: Extended Integration Tests
    runs-on: ubuntu-latest
    needs: [core-tests, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap redis-server openssh-server

      - name: Setup test environment
        run: |
          # Start test services
          sudo systemctl start redis-server
          sudo systemctl start ssh

          # Make test scripts executable
          chmod +x ./test/docker/test-env.sh

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        run: make build

      - name: Run integration tests
        run: |
          # Run integration tests if they exist
          if [ -d "test/integration" ]; then
            go test -v ./test/integration/...
          else
            echo "No integration tests found, skipping..."
          fi
