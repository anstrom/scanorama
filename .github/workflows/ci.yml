name: CI

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: "1.23.0"

permissions:
  contents: read

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: always

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: ./.github/actions/setup-go
        with:
          install-system-deps: "false"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=10m --verbose --out-format=sarif:golangci-lint-results.sarif

      - name: Upload golangci-lint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: golangci-lint-results.sarif

  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: ./.github/actions/setup-go

      - name: Run unit tests
        run: make test-unit

      - name: Setup test database
        run: |
          chmod +x ./test/docker/test-db.sh
          ./test/docker/test-db.sh start

      - name: Run integration tests
        run: make test-db-integration

      - name: Generate coverage report
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

      - name: Cleanup test database
        if: always()
        run: ./test/docker/test-db.sh cleanup

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
      actions: read
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: ./.github/actions/setup-go

      - name: Build binary
        run: make build

      - name: Test binary
        run: |
          ./build/scanorama -version
          ./build/scanorama -help

      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
        with:
          base64-subjects: "${{ steps.hash.outputs.hashes }}"

      - name: Generate build hash
        id: hash
        run: |
          echo "hashes=$(sha256sum build/scanorama | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: scanorama-${{ github.sha }}
          path: build/scanorama

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        if: github.ref == 'refs/heads/main'
        with:
          subject-path: "build/scanorama"

  scorecard:
    name: OSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  security:
    name: Security
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: ./.github/actions/setup-go
        with:
          install-system-deps: "false"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
