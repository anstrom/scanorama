name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24.5"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.5
          verify: false
          args: --timeout=5m --config .golangci.yml

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: scanorama_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d scanorama_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap postgresql-client

      - name: Download Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Setup database
        uses: ./.github/actions/setup-database
        with:
          database-name: scanorama_test
          database-user: test_user
          database-password: test_password

      - name: Run tests
        env:
          POSTGRES_PORT: 5432
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: scanorama_test
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
        run: go test -v -race ./...

      - name: Generate coverage
        env:
          POSTGRES_PORT: 5432
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: scanorama_test
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Set binary name based on OS
          BINARY_NAME="scanorama"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="scanorama.exe"
          fi

          # Build with version info
          make build VERSION=v0.1.0-dev BINARY_NAME="$BINARY_NAME"

          # Create artifact directory
          mkdir -p dist
          mv build/$BINARY_NAME dist/scanorama-${{ matrix.goos }}-${{ matrix.goarch }}${BINARY_NAME#scanorama}

      - name: Test binary (Linux only)
        if: matrix.goos == 'linux'
        run: |
          chmod +x dist/scanorama-${{ matrix.goos }}-${{ matrix.goarch }}
          ./dist/scanorama-${{ matrix.goos }}-${{ matrix.goarch }} version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y nmap redis-server openssh-server

      - name: Setup test environment
        run: |
          # Start test services
          sudo systemctl start redis-server
          sudo systemctl start ssh

          # Make test scripts executable
          chmod +x ./test/docker/test-env.sh

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        run: make build

      - name: Run integration tests
        run: |
          # Run integration tests if they exist
          if [ -d "test/integration" ]; then
            go test -v ./test/integration/...
          else
            echo "No integration tests found, skipping..."
          fi
