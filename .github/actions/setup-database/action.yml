name: "Setup Test Database"
description: "Sets up PostgreSQL database for testing"
inputs:
  postgres-version:
    description: "PostgreSQL version to use"
    required: false
    default: "16-alpine"
  database-name:
    description: "Database name"
    required: false
    default: "scanorama_test"
  database-user:
    description: "Database user"
    required: false
    default: "test_user"
  database-password:
    description: "Database password"
    required: false
    default: "test_password"

runs:
  using: "composite"
  steps:
    - name: Install PostgreSQL client
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y postgresql-client

    - name: Diagnose service containers
      shell: bash
      run: |
        echo "=== Service Container Diagnostics ==="
        echo "Docker containers:"
        docker ps -a || echo "Docker not available"
        echo ""
        echo "PostgreSQL service logs:"
        docker logs $(docker ps -q --filter "ancestor=postgres:17-alpine") 2>/dev/null || echo "No postgres container found"
        echo ""
        echo "Network connectivity test:"
        nc -zv localhost 5432 2PostgreSQL to be ready..."
        for i in {1..60}; do
          if pg_isready -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }}; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL ($i/60)..."
          sleep 2
        done

    - name: Setup database and extensions
      shell: bash
      run: |
        echo "Setting up database extensions..."
        psql -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }} -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        psql -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }} -c "CREATE EXTENSION IF NOT EXISTS \"btree_gist\";"

        echo "Verifying database setup..."
        psql -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }} -c "SELECT version();"
        psql -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }} -c "SELECT current_database(), current_user;"

    - name: Initialize database schema
      shell: bash
      run: |
        echo "Initializing database schema..."
        if [ -f "internal/db/001_initial_schema.sql" ]; then
          psql -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }} -f internal/db/001_initial_schema.sql
          echo "Schema initialization completed"

          # Verify tables were created
          TABLE_COUNT=$(psql -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }} -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';" | tr -d ' ')
          echo "Created $TABLE_COUNT tables"

          if [ "$TABLE_COUNT" -lt 3 ]; then
            echo "Error: Expected at least 3 tables, but only found $TABLE_COUNT"
            echo "Available tables:"
            psql -h localhost -p 5432 -U postgres -d ${{ inputs.database-name }} -c "\dt"
            exit 1
          fi
        else
          echo "Warning: Schema file not found at internal/db/001_initial_schema.sql"
          echo "Available files:"
          find . -name "*.sql" -type f | head -10
        fi

    - name: Create database config
      shell: bash
      run: |
        mkdir -p test/fixtures
        cat > test/fixtures/database.yml << EOF
        test:
          host: localhost
          port: 5432
          database: ${{ inputs.database-name }}
          username: postgres
          password: postgres
          ssl_mode: disable
        ci:
          host: localhost
          port: 5432
          database: ${{ inputs.database-name }}
          username: postgres
          password: postgres
          ssl_mode: disable
        EOF

        echo "Database config created:"
        cat test/fixtures/database.yml
